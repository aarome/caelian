<?php

/**
 * @file
 * Functions to support theming in the aventine theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;

/**
 * Implements template_preprocess_html().
 *
 * @param array $variables
 */
function aventine_preprocess_html(&$variables) {

  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = 'path-' . Html::cleanCssIdentifier($path_alias);
  if ($current_path == '/node/53' || $current_path == '/it/node/53' && $path_alias == 'home') {
    $variables['attributes']['class'][] = 'home';
  }
}

/**
 * Implements template_preprocess_page.
 *
 * @param array $variables
 */
function aventine_preprocess_page(&$variables) {
  $site_name = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['linked_site_name'] = ['#type' => 'link', '#title' => $site_name, '#url' => Url::fromRoute('<front>')];
}

/**
 * Implements template_preprocess_node.
 *
 * @param array $variables
 */
// Function aventine_preprocess_node(&$variables) {
//
// }.

/**
 * Change the link title of the language block.
 */
function aventine_preprocess_links__language_block(&$variables) {
  $variables['links']['en']['link']['#title'] = 'EN';
  $variables['links']['it']['link']['#title'] = 'IT';
}

/**
 *
 */
function aventine_preprocess_region(&$variables) {
  $variables['url'] = $_SERVER['REQUEST_URI'];
  $variables['#cache']['contexts'][] = 'url.path';
}

/**
 * Implements template_theme_suggestions_block_alter.
 */
function aventine_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $block = $variables['elements'];
  $blockType = $block['#configuration']['provider'];
  if ($blockType == "block_content") {
    $bundle = $block['content']['#block_content']->bundle();
    array_splice($suggestions, 2, 0, 'block__' . $bundle);
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function aventine_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__' . $element['#name'];
    $suggestions[] = 'container__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
}

/**
 * Implements hook_preprocess_node().
 */
function aventine_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  $variables['display_submitted'] = FALSE;
  // Build variables for type...
  $node = $variables['elements']['#node'];
  $type = $node->getType();
  $type = str_replace('_', '-', $type);
  // ...and view mode.
  $mode = $variables['elements']['#view_mode'];
  $mode = str_replace('_', '-', $mode);
  // Check for prescence of variables array.
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }
  $variables['node_type'] = $type;
}

/**
 * Implements template_preprocess_block.
 */
// Function aventine_preprocess_block(&$variables) {
//   $variables['configuration'] = $variables['elements']['#configuration'];
//   $variables['plugin_id'] = $variables['elements']['#plugin_id'];
//   $variables['base_plugin_id'] = $variables['elements']['#base_plugin_id'];
//   $variables['derivative_plugin_id'] = $variables['elements']['#derivative_plugin_id'];
//   $variables['label'] = !empty($variables['configuration']['label_display']) ? $variables['configuration']['label'] : '';
//   $variables['content'] = $variables['elements']['content'];.
// if (isset($variables['elements']['content']['#title']) && !empty($variables['configuration']['label_display'])) {
//     $variables['label'] = $variables['elements']['content']['#title'];
//   }.
// if (!empty($variables['elements']['#id'])) {
//     $variables['attributes']['id'] = Html::getUniqueId('block-' . $variables['elements']['#id']);
//   }.
// if ($variables['label'] && isset($variables['attributes']['role'])) {
//     $variables['title_attributes']['id'] = Html::getUniqueId($variables['label']);
//     $variables['attributes']['aria-describedby'] = $variables['title_attributes']['id'];
//   }
// }.
